import React from "react";
import m from "@midasit-dev/moaui";

import { Editor } from "@monaco-editor/react";

import GridLoader from "react-spinners/GridLoader";

import { motion } from "framer-motion";

import { enqueueSnackbar } from "notistack";

const App = () => {
  const inputRef = React.useRef<HTMLInputElement>(null);

  const [content, setContent] = React.useState<string | null>(null);

	const [sendLoading, setSendLoading] = React.useState(false);

	const handleImport = React.useCallback(async () => {
		setTimeout(async () => {
			try {
				if (!inputRef.current) return;
				inputRef.current.click();
				inputRef.current.onchange = (e) => {
				const file = (e.target as HTMLInputElement).files?.[0];
				if (!file) return;
	
				const reader = new FileReader();
				reader.onload = (e) => {
					const content = e.target?.result;
					if (content === null) return;
	
					const spacegassRegex =
						/^SPACE GASS Text File - Version 1265\s*# Generated by SPACE GASS 14\.20 \(www\.spacegass\.com\)\s*# 1\. Blank lines are permitted anywhere in the file\s*# 2\. Comment lines must begin with the # character\s*# 3\. Continued lines must end with the & character\s*# 4\. Items within a line must be separated by commas\s*# 5\. Items that contain commas must be enclosed in quotes\s*# 6\. The maximum line length is 1024 characters\s*# 7\. The maximum total length of a set of continued lines is 4096 characters\s*# 8\. You can use \|\| as a carriage return in a block of text\s*\s*[\s\S]*\s*END\s*$/g;
					if (!spacegassRegex.test(content as string)) {
						enqueueSnackbar(`The file is not a valid spacegass file.`, {
							variant: "error",
						});
						setContent(null);
						return;
					}
	
					enqueueSnackbar(
						`Successfully imported the spacegass file. content-length: (${
							content?.toString().length
						})`,
						{ variant: "success" }
					);
					setContent(content as string);
				};
				reader.readAsText(file);
	
				// Reset the file input value to allow selecting the same file again
				if (e.target instanceof HTMLInputElement) {
					e.target.value = ""; // 파일 이름 초기화
				}
			};
			} catch (error) {
				console.error(error);
				setContent(null);
			} finally {}
		}, 500);
	}, [ setContent ]);

	const handleSend = React.useCallback(async () => {
		setTimeout(async () => {
			try {
				if (!content) {
					enqueueSnackbar("No content to send", { variant: "error" });
					return;
				}
	
				const formData = new FormData();
				formData.append(
					"file",
					new Blob([content], { type: "text/plain" }),
					"data.txt"
				);
				const res = await fetch(
					//TODO 변경 되어야 합니다. (우선 DV)
					"https://moa.rpm.kr-dv-midasit.com/backend/function-executor/linux-execute",
					{
						method: "POST",
						body: formData,
					}
				);
	
				if (!res.ok) {
					enqueueSnackbar(`Failed to convert the spacegass file to mct.`, {
						variant: "error",
					});
					return;
				}
	
				let mct = await res.text();
				mct = mct.replace(/\\/g, "\\\\");
				mct = mct.replace(
					";---------------------------------------------------------------------------\n;  midas Civil Text(MCT) File.\n;  Date : \n;---------------------------------------------------------------------------\n \n",
					""
				);
	
				enqueueSnackbar(`Successfully converted the spacegass file to mct.`, {
					variant: "success",
				});
	
				const url = await m.VerifyUtil.getBaseUrlAsync();
				const mapiKey = m.VerifyUtil.getMapiKey();
				const resMxtCmdShell = await fetch(`${url}/ope/mxtcmdshell`, {
					headers: {
						"Content-Type": "application/json",
						"MAPI-Key": mapiKey,
					},
					method: "POST",
					body: JSON.stringify({
						Argument: mct,
					}),
				});
	
				if (!resMxtCmdShell.ok) {
					enqueueSnackbar(`Failed to send the mct.`, {
						variant: "error",
					});
					return;
				}
	
				enqueueSnackbar(`Successfully sent the mct.`, {
					variant: "success",
				});
			} catch (error) {
				console.error(error);
			} finally {
				setSendLoading(false);
			}
		}, 1000);
	}, [ content, setSendLoading ]);

	React.useEffect(() => {
		if (!sendLoading) return;
		handleSend();
	}, [sendLoading, handleSend]);

  return (
    <m.GuideBox width={800} spacing={2} padding={2}>
      <m.VerifyDialog />
      <m.GuideBox row width="100%" horSpaceBetween verCenter>
        <m.Typography>
          Please insert the text file extracted from Spacegass
        </m.Typography>
        <m.GuideBox row verCenter spacing={2}>
          <input
            ref={inputRef}
            type="file"
            style={{ display: "none" }}
            accept=".txt"
          />
          <m.Button 
						onClick={() => handleImport()}
					>
            Import
          </m.Button>
          <m.Button
            onClick={() => setSendLoading(true)}
            color="negative"
            disabled={!content}
						loading={sendLoading}
          >
            Send
          </m.Button>
        </m.GuideBox>
      </m.GuideBox>
      <TextEditorWithReadOnly content={content} />
    </m.GuideBox>
  );
};

export default App;

const TextEditorWithReadOnly = (props: any) => {
  const { content } = props;

  const editorRef = React.useRef(null);

  function handleEditorDidMount(editor: any, monaco: any) {
    editorRef.current = editor;
  }

  // function handleEditorChange(value: any, event: any) {
  //   console.log("here is the current model value:", value, event);
  //   enqueueSnackbar(`Editor content changed. length (${value.length})`, {
  //     variant: "info",
  //   });
  // }

  // const debounceEditorChange = _.debounce(handleEditorChange, 1000);

  return (
    <m.Panel width="100%" title="Imported Text">
      <motion.div
        initial={{
          opacity: 0,
        }}
        animate={{
          opacity: 1,
          transition: {
            duration: 0.5,
          },
        }}
        style={{
          width: "100%",
          height: 300,
					display: 'flex',
					justifyContent: 'center',
					alignItems: 'center',
        }}
      >
        {content === null && (
					<div style={{opacity: 0.5}}>
						<GridLoader />
					</div>
				)}
        {content !== null && (
          <Editor
            height={300}
            defaultLanguage="text"
            defaultValue=""
            value={content ?? ""}
            onMount={handleEditorDidMount}
            // onChange={debounceEditorChange}
            loading={<GridLoader />}
            options={{
              readOnly: true,
            }}
          />
        )}
      </motion.div>
    </m.Panel>
  );
};
